\documentclass[12pt]{article}
\usepackage{geometry}                % See geometry.pdf to learn the layout options. There are lots.
\geometry{letterpaper}                   % ... or a4paper or a5paper or ... 
%\geometry{landscape}                % Activate for for rotated page geometry
%\usepackage[parfill]{parskip}    % Activate to begin paragraphs with an empty line rather than an indent
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{subfig}
\usepackage{multirow}
\usepackage{pstricks,pst-node,pst-tree}



\title{Analysis of loadings}
\author{Wesley Brooks}
\date{}                                           % Activate to display a given date or no date

\begin{document}
\setkeys{Gin}{width=0.9\textwidth}    %make figures a bit wider than the Sweave default.
\maketitle

<<label=read_data, echo=FALSE>>=
#Read data into R and do some basic manipulation to get it into a usable format:
setwd('~/git/loadings/code/Sweave')
source('~/git/loadings/code/guide.r')
streams = c('eagle', 'joosvalley', 'otter', 'brewery')
outputs = c('sstorm_tot', 'sstorm_max', 'sstorm_avg', 'stot_tot', 'stot_max',
                'stot_avg', 'pstorm_tot', 'pstorm_max', 'pstorm_avg', 'ptot_tot', 'ptot_max', 'ptot_avg')

#Names of the NWS data files for each creek
nws_files = list("eagle"=c("eagle/NWS/Winona_91-94_ASCII.txt", "eagle/NWS/Winona_03-07_ASCII.txt"),
                    "joosvalley"=c("eagle/NWS/Winona_91-94_ASCII.txt", "eagle/NWS/Winona_03-07_ASCII.txt"),
                    "otter"=c("otter/NWS/Sheboygan_Otter_raw.txt"),
                    "brewery"=c("brewery/NWS/Madison_SND.txt"))


#loop through the streams, reading them in one by one
for(stream_name in streams) {
    data_file = paste('../../data/', stream_name, '/', stream_name, 'creek.csv', sep='')
    stream = read.csv(data_file, header=T, na.strings=c('NA', 'na')) 
    
    #read the daily flow file, which we use for antecedent moisture contitions
    daily_flow = paste("../../data/", stream_name, "/", stream_name, "_q.out", sep="")
    head = strsplit( readLines(daily_flow)[1], "\t" )
    daily_flow = read.table(daily_flow, skip=2, col.names=unlist(head))
    daily_flow$DV_date = with( daily_flow, as.POSIXlt( as.character(DV_date), format="%m/%d/%Y" ) )
    
    #do some basic data transformations:
    stream = within( stream, {
        event_type <- factor(event_type)
        year <- factor(year)
        melt_snow[melt_snow=='N' | melt_snow=='Z' | melt_snow=='U'] <- NA
        melt_snow <- as.numeric(levels(melt_snow)[melt_snow])
        sweq <- as.numeric(sub("%", "e-2", sweq))
        ap_1day <- as.numeric(ap_1day)
        ap_2day <- as.numeric(ap_2day)
        ap_3day <- as.numeric(ap_3day) 
        tmax <- as.numeric(tmax)
        tmin <- as.numeric(tmin)
        tmean <- as.numeric(tmin)
        stream <- as.factor(stream_name)
        start_day <- as.POSIXlt( as.character(start_day), format="%m/%d/%Y" )
        julian <- start_day$yday + 1
        sin_julian <- sin(julian)
        cos_julian <- cos(julian)
        for(output in outputs) {
            assign( paste('log_', output, sep=""), log10(get(output)+0.01) ) }
        m <- as.factor(ifelse(is.na(m),0,ifelse(m=='M','M',0)))
        event <- rep(1, length(m))
        } )

    #Find the base flow that immediately preceded each event
    antecedent_qbase = rep(NA, length(stream$start_day))
    for( i in 1:length(antecedent_qbase) ) {
        #get the date just prior to row i (subtraction is in units of seconds)
        unmatched = identical(which( daily_flow$DV_date == stream$start_day[i]-86400 ), integer(0))
        antecedent_qbase[i] = ifelse(unmatched, NA, daily_flow[which( daily_flow$DV_date == stream$start_day[i]-86400 ), 'QGW_fixed']) }
    stream$antecedent_qbase = antecedent_qbase

    #Find the average air temperature in the days before the event:
    #first, read the raw air temperature data
    nws = data.frame()
    for( nws_file in get(stream_name, pos=nws_files)) {
        nws_path = paste("../../data/", nws_file, sep="")
        nws = rbind(nws, read.csv(nws_path, na.strings=c("", "99999", "-1.23E+25"))) }
    nws$date = with(nws, ISOdate(year=year, month=month, day=day))
    
    #Now find the antecedent air temperature for each event
    #We will compute the mean, min, and range of air temps before this event began.
    antecedent_tmean = rep(NA, length(stream$start_day))
    antecedent_trange = rep(NA, length(stream$start_day))
    antecedent_tmax = rep(NA, length(stream$start_day))
    period = 2 #how far back in days to do the averaging
    for( i in 1:length(antecedent_tmean) ) {
        to_average = which(nws$date < stream$start_day[i] & nws$date >= stream$start_day[i] - period*86400)
        antecedent_tmean[i] = mean(nws$Tmean[to_average], na.rm=TRUE)
        antecedent_tmax[i] = max(nws$Tmean[to_average], na.rm=TRUE) 
        antecedent_trange[i] = diff(range(nws$Tmean[to_average], na.rm=TRUE)) }
    stream$antecedent_tmean = antecedent_tmean
    stream$antecedent_tmax = ifelse(antecedent_tmax>-Inf, antecedent_tmax, NA)
    stream$antecedent_trange = ifelse(antecedent_trange>-Inf, antecedent_trange, NA)

    #Now add this stream's data to the frame.
    assign(stream_name, stream) }

#Now mark the class of each event (1:snowmelt-driven, 2:pre-vegetation, 3:post-vegetation)
#We will gather all the data into one frame:
aggregate = data.frame()

#loop through the stream sites:
for(stream_name in streams) {
	stream = get(stream_name)

	#Decide which events are snowmelt-driven:         
	class = vector()
	prev_class = 0
	num_events = dim(stream)[1]
                
	#loop through the events                        
	for(row in 1:num_events) {
		#first look for the beginning of each year's snowmelt events
		if(stream$m[row]=='M') {
			class=c(class, 1)
			prev_class=1 }
		else if(prev_class==1 & (stream$month[row]>=10 | stream$julian[row]<=135)) {
			class=c(class, 1)
			prev_class=1 }
		else {
			class=c(class, 3)
			prev_class=3 } }
      
	prev_class = 0
	for(row in num_events:1) {
		#now look for the end of the snowmelt events
		if(stream$m[row]=='M') {
			class[row]=1
			prev_class=1 }
		else if(class[row]==3) {
			class[row]=3
			prev_class=3 }
		else if(stream$julian[row]<=135 & prev_class!=1) {
			class[row]=2
			prev_class=2 }
		else { class[row]=1 } }
      
	#save the class identifiers back to the stream's data frame
	stream$event_class = class
	assign(stream_name, stream)
    aggregate = rbind(aggregate, stream) }
@

\section{Introduction}
Minimizing the erosion of sediment into streams is a goal for water quality managers. In order to develop plans to limit the amount of sediment that gets into streams, those managers need to know how sediment gets into the water. 

The next block of code produces a set of bar charts that show the relative contributions of the snow-driven events, post-snow-pre-vegetation events, and the post-vegetation events.\\


<<label=bubble_plots, echo=False, include=False>>=
#The "_no" dataframes exclude the snowfall-influenced events.
for(stream_name in streams) {
    stream = get(stream_name)
    assign( paste(stream_name, "_nosnow", sep=""), stream[stream$event_class!=1,] )
    assign( paste(stream_name, "_snow", sep=""), stream[stream$event_class==1,] )

    #Produce the bubble plots
    symbols(stream[stream$event_class!=1,]$antecedent_qbase,
            stream[stream$event_class!=1,]$theisen,
            circles=sqrt( stream[stream$event_class!=1,]$sstorm_tot/pi ),
            inches=0.25, fg="white", bg="red", bty='n',
            xlim=range(stream[!is.na(stream$antecedent_qbase),]$antecedent_qbase)*c(0.9,1.1),
            ylim=range(stream[!is.na(stream$theisen),]$theisen)*c(0.9,1.1)) }
@

<<label=stepwise_BIC, echo=False>>=
#This function extracts the terms in the model formula.
parse_args <- function(model) {
    s = attr(model$model, 'names')
    return( s )
    }

#This function uses the BIC to screen variables, returning the 'step' object.
stepwise_BIC <- function(target, data) {
    d = data[,c(target, "num_events", "theisen", "p5max", "p10max", "p15max", "p30max", "p60max", "ei", "duration", "ap_1day", "ap_2day", "ap_3day", "tmax", "tmean", "tmin", "nws_prec", "nws_snow", "melt_snow", "cos_julian", "sin_julian", "julian", "antecedent_qbase", "theisen", "antecedent_tmean", "antecedent_tmax", "antecedent_trange")]

    formula = as.formula( paste(target, "~.") )
    fm1 <- lm(formula, data=d, x=T)
    
    d = data.frame(cbind(target=fm1$fitted+fm1$residual, fm1$x))
    names(d)[1] = target
    fm2 <- lm(formula, data=d)
    screened = step(fm2, direction='both', k=log(dim(d)[1]))
    
    terms = parse_args(screened)
    target = terms[1]
    predictors = terms[-1]
    formula = as.formula(paste(target, "~", paste(predictors, collapse="+")))
    
    model = lm(formula, data=data, x=T)
    return(model)
    }

#This function ranks the predictors in the model based on their impact on the output.
rank_predictors <- function(model) {
    terms = parse_args(model)
    target = terms[1]
    predictors = terms[-1]
    coefs = model$coefficients
    data = model$x
    
    influence = vector()
    for(predictor in predictors) {
        influence = c(influence, abs(coefs[predictor]*sd(data[,predictor]))) }
    
    influence = sort(influence, decreasing=T)
    return(influence)
    }

r2 <- function(model){
    actual = model$residual+model$fitted
    
    rss = sum(model$residual**2)
    tss = sum((actual-mean(actual))**2)
    
    return( 1-rss/tss )
}

#This function adds variables one-by-one to the model, finding the R^2 at each step.
r2_step <- function(model, variables) {
    output = attr(model$model, "names")[1]
    call = paste(output, "~", names(variables)[1], sep="")
    data = model$x
    
    r_square = vector()

    for(variable in names(variables)) {
        print(call)
        f = as.formula(call)
        model = lm(formula=f, data=d)
        r_square = c(r_square, r2(model))
        call = paste(call, "+", variable)
        
    }
    
    model = update(model, formula=call)
    r_square = c(r_square, r2(model))
    
    return( r_square )
}

@


\section{Variable selection}
In order to make a model of the load carried by the stream, we need to select the predictor variables that have explanatory power. We use stepwise regression with the Bayesian Information Criterion (BIC) to screen the potential predictor variables.


<<label=variable_selection, echo=False>>=
es = rank_predictors(stepwise_BIC(target="log_stot_tot", data=eagle_nosnow))
js = rank_predictors(stepwise_BIC(target="log_stot_tot", data=joosvalley_nosnow))
os = rank_predictors(stepwise_BIC(target="log_stot_tot", data=otter_nosnow))
bs = rank_predictors(stepwise_BIC(target="log_stot_tot", data=brewery_nosnow))

ep = rank_predictors(stepwise_BIC(target="log_ptot_tot", data=eagle_nosnow))
jp = rank_predictors(stepwise_BIC(target="log_ptot_tot", data=joosvalley_nosnow))
op = rank_predictors(stepwise_BIC(target="log_ptot_tot", data=otter_nosnow))
bp = rank_predictors(stepwise_BIC(target="log_ptot_tot", data=brewery_nosnow))
@

\begin{table}[h]
    \begin{center}
    \begin{tabular}{lrl}
        Solids: & & \\
        & Eagle & \Sexpr{ paste(names(es), collapse=", ") }\\
        & Joos & \Sexpr{ paste(names(js), collapse=", ") }\\
        & Otter & \Sexpr{ paste(names(os), collapse=", ") }\\
        & Brewery & \Sexpr{ paste(names(bs), collapse=", ") }\\
        \hline \\
        Phosphorus: & & \\
        & Eagle & \Sexpr{ paste(names(ep), collapse=", ") }\\
        & Joos & \Sexpr{ paste(names(jp), collapse=", ") }\\
        & Otter & \Sexpr{ paste(names(op), collapse=", ") }\\
        & Brewery & \Sexpr{ paste(names(bp), collapse=", ") }\\
    \end{tabular}
    \end{center}
\end{table}


\begin{table}[h]
    \begin{center}
    \begin{tabular}{lrl}
        Solids: & & \\
        & Eagle & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_stot_tot", data=eagle_nosnow))), collapse=", ") }\\
        & Joos & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_stot_tot", data=joosvalley_nosnow))), collapse=", ") }\\
        & Otter & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_stot_tot", data=otter_nosnow))), collapse=", ") }\\
        & Brewery & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_stot_tot", data=brewery_nosnow))), collapse=", ") }\\
        \hline \\
        Phosphorus: & & \\
        & Eagle & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_ptot_tot", data=eagle_nosnow))), collapse=", ") }\\
        & Joos & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_ptot_tot", data=joosvalley_nosnow))), collapse=", ") }\\
        & Otter & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_ptot_tot", data=otter_nosnow))), collapse=", ") }\\
        & Brewery & \Sexpr{ paste(names(rank_predictors(stepwise_BIC(target="log_ptot_tot", data=brewery_nosnow))), collapse=", ") }\\
    \end{tabular}
    \end{center}
\end{table}





<<label=proportions, echo=False, include=False>>=
targets = c('ptot_tot', 'pstorm_tot', 'stot_tot', 'sstorm_tot')

#Define the function that we will use to determine what proportion of loadings comes from each event class
proportions <- function(streams, target, col.names) {
	result = matrix( nrow=length(streams), ncol=length(col.names) )
	for(i in 1:length(streams)) {
		stream = get(streams[i])
		result[i,] = sapply(1:length(col.names), (function(x) sum(stream[stream$event_class==x,target], na.rm=T)/sum(stream[,target], na.rm=T))) }
    result = data.frame(result)
    names(result) = col.names
    row.names(result) = streams
	return( result ) }
    
percentages <- function(streams, target, col.names, decimals=1) {
    props = proportions(streams, target, col.names)
    result = matrix( nrow=0, ncol=length(col.names) )
    rows = dim(props)[1]
    for( row in 1:rows ) {
        result = rbind( result, paste( ifelse(round(props[row,]*100, decimals)%%1 == 0,
            paste(as.character( round(props[row,]*100, 0) ), ".0", sep=""),
            as.character( round(props[row,]*100, decimals) )), "%", sep="" )) }
    result=data.frame(result)
    names(result) = names(props)
    row.names(result) = row.names(props)
    return( result ) }
@



<<label=major_function, echo=False, include=False>>=
#Function to flag the largest observations of a certain variable.
major <- function(data, target, q=0.9, strata='') {
    #Flag the major events within each level of strata
    if(strata != '') {
        major = rep(0, length(data[,target]))
        
        #Loop through the strata
        for(stratum in unique(data[,strata])) {
            indx = which(data[,strata]==stratum)
            major[indx] = ifelse(data[indx,target] > quantile(data[indx,target], q, na.rm=TRUE), 1, 0) } }
            
    #If no stratification is provided, then just flag the overall major events
    else { major = ifelse(data[,target]>quantile(data[,target], q, na.rm=TRUE), 1, 0) }
    
    #Either way, return the result
    return(major) }
@


<<include=False, echo=False>>=
for( target in targets ) {
    p = percentages(streams, target, col.names=c("snowmelt-driven", "early post-snow", "late post-snow"))
    pp = as.matrix( proportions(streams, target, col.names=c("snowmelt-driven", "early post-snow", "late post-snow")) )
    
    variable_name = paste(target, "_percentages", sep="")
    variable_name2 = paste(target, "_proportions", sep="")
    
    assign(variable_name, value=p)
    assign(variable_name2, value=pp) }
@



The next block prints a table of the proportion of total phosphorus loading due to each class of event at each site\\


<<label=total_solids_table,echo=FALSE,results=tex>>=
library(xtable)
print(xtable(stot_tot_percentages, caption="Proportion of total suspended solids loading contributed by each type of event", label="tab:stot", align=c('l', 'c', 'c', 'c')), table.placement="h",
caption.placement="bottom", hline.after=0 )
@

<<label=total_phosphorus_table,echo=FALSE,results=tex>>=
library(xtable)
print(xtable(ptot_tot_percentages, caption="Proportion of total phosphorus loading contributed by each type of event", label="tab:ptot", align=c('l', 'c', 'c', 'c')), table.placement="h",
caption.placement="bottom", hline.after=0 )
@








<<label=barchart, echo=False, include=False>>=
layout(matrix(1:4,2,2))
colors <- gray.colors(dim(ptot_tot_proportions)[1])

barplot(ptot_tot_proportions, beside=T, names.arg=c("snow","pre-veg","veg"), ylab="proportion of phosphorus")
barplot(stot_tot_proportions, beside=T, names.arg=c("snow","pre-veg","veg"), ylab="proportion of solids")
barplot(pstorm_tot_proportions, beside=T, names.arg=c("snow","pre-veg","veg"), ylab="proportion of phosphorus")
barplot(sstorm_tot_proportions, beside=T, names.arg=c("snow","pre-veg","veg"), ylab="proportion of solids")
legend(x="topleft", legend=streams, fill=colors, bty='n')
@



Produce plots of the proportion of the suspended solids and phosphorus (both total loading and stormflow loading) that is contributed by each class of event at each stream site:\\



\begin{figure}[h!]
    \begin{center}
<<label=fig2, fig=True, echo=False, width=6, height=8.5>>=
<<barchart>>
@
    \end{center}
    \vspace{-10mm}
    \caption{Cumulative storm loadings at the four creeks.\label{bars}}
\end{figure}




<<label=stot_boxplots, echo=False, include=False>>=
yy=c(-2, 3.5)
event_classes = c("snow","pre-veg","veg")

#Eagle creek
boxplot(log_stot_tot~event_class, data=eagle, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, ylab="log(sediment load)", names=event_classes, xlim=c(1,15))

#Otter creek
boxplot(log_stot_tot~event_class, data=otter, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, ann=F, names=event_classes, add=T, at=5:7, yaxt='n')

#Joos Valley creek
boxplot(log_stot_tot~event_class, data=joosvalley, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, ann=F, names=event_classes, add=T, at=9:11, yaxt='n')

#Brewery creek
boxplot(log_stot_tot~event_class, data=brewery, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, ann=F, names=event_classes, add=T, at=13:15, yaxt='n')
@



<<label=ptot_boxplots, echo=False, include=False>>=
yy=c(-1, 4)
event_classes = c("snow","pre-veg","veg")

#Eagle creek
boxplot(log_ptot_tot~event_class, data=eagle, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, ylab="log(phosphorus load)", names=event_classes, xlim=c(1,11))

#Otter creek
boxplot(log_ptot_tot~event_class, data=otter, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, yaxt='n', ann=F, names=event_classes, add=T, at=5:7)

#Joos Valley creek
boxplot(log_ptot_tot~event_class, data=joosvalley, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, yaxt='n', ann=F, names=event_classes, add=T, at=9:11)

#Brewery creek
boxplot(log_ptot_tot~event_class, data=brewery, bty='n', ylim=yy, cex=0.6, pch=4, boxwex=0.4, frame.plot=F, yaxt='n', ann=F, names=event_classes, add=T, at=13:15)
@





%Boxplots of the contribution from individual storm events
\begin{figure}[h]
    \setkeys{Gin}{width=1\textwidth}    %make figures a bit wider than the Sweave default.
    \begin{center}
<<label=boxplot_stot, fig=True, echo=False, width=9, height=5>>=
<<stot_boxplots>>
@
<<label=boxplot_ptot, fig=True, echo=False, width=9, height=5>>=
<<ptot_boxplots>>
@
    \end{center}
\end{figure}




<<label=cumulative_sloading_by_rainfall, include=False, echo=False>>=
line_type=1
color=1
yy=c(0,1)

for(stream in streams) {
    stream_data = get(stream)
    
    non_snow = stream_data[stream_data$event_class!=1,]
    non_snow_sorted = non_snow[ order(non_snow$nws_prec) ,]
    y = cumsum(non_snow_sorted$stot_tot)/sum(stream_data$stot_tot, na.rm=T)
    
    stream_data = get(stream)
    plot( x=non_snow_sorted$nws_prec, y=y, type='l', xlab="NWS precipitation",
        ylab=paste('proportion of total sediment load'), lty=line_type, col=color, bty='n', lwd=2, ylim=yy)
    par(new=T, ann=F, xaxt='n', yaxt='n')
    line_type = line_type+1 }
legend(x='topleft', bty='n', legend=streams, lty=c(1,2,3))
@

<<label=cumulative_ploading_by_rainfall, include=False, echo=False>>=
line_type=1
color=1
yy=c(0,1)

for(stream in streams) {
    stream_data = get(stream)
    
    non_snow = stream_data[stream_data$event_class!=1,]
    non_snow_sorted = non_snow[ order(non_snow$nws_prec) ,]
    y = cumsum(non_snow_sorted$ptot_tot)/sum(stream_data$ptot_tot)
    
    stream_data = get(stream)
    plot( x=non_snow_sorted$nws_prec, y=y, type='l', xlab="NWS precipitation",
        ylab=paste('proportion of total sediment load'), lty=line_type, col=color, bty='n', lwd=2, ylim=yy)
    par(new=T, ann=F, xaxt='n', yaxt='n')
    line_type = line_type+1 }
legend(x='topleft', bty='n', legend=streams, lty=c(1,2,3))
@


<<label=cdf_plot, include=False, echo=False>>=
line_type=1
color=1
for(stream in streams) {
    stream_data = get(stream)
    plot( cumsum(sort(stream_data[, 'sstorm_tot'], decreasing=T)), type='l',
        ylab=paste('cumulative storm loading'), lty=line_type, col=color, bty='n', lwd=2)
    par(new=T, ann=F, xaxt='n', yaxt='n')
    line_type = line_type+1 }
legend(x='bottomright', bty='n', legend=streams, lty=c(1,2,3))
@



\begin{figure}
    \begin{center}
<<label=figure1, fig=True, echo=False, width=7, height=4.5>>=
<<cdf_plot>>
@
    \end{center}
    \caption{Cumulative storm loadings at the three creeks.\label{cdf}}
\end{figure}


\begin{figure}
    \begin{center}
<<label=figure2, fig=True, echo=False, width=6, height=5>>=
<<cumulative_sloading_by_rainfall>>
@
    \end{center}
    \caption{Proportion of the total sediment load contributed by rainfall events up to the size shown. Snowmelt-driven events are excluded.\label{cdf-p}}
\end{figure}

\begin{figure}
    \begin{center}
<<label=figure3, fig=True, echo=False, width=6, height=5>>=
<<cumulative_ploading_by_rainfall>>
@
    \end{center}
    \caption{Proportion of the total phosphorus load contributed by rainfall events up to the size shown. Snowmelt-driven events are excluded.\label{cdf-s}}
\end{figure}



Figure out what proportion of total sediment loading is contributed by the top 10\% of storms:\\



<<label=proportion, include=False, echo=False>>=
target = "stot_tot"

q_90 = list()
for(stream_name in streams){
    stream = get(stream_name)
    stream$major <- with(stream, ifelse(get(target)>quantile(get(target), 0.9),1,0))    
    proportion = sum(stream[stream$major==1,'stot_tot'], na.rm=T)/sum(stream[,'stot_tot'], na.rm=T)
    q_90[stream_name] = proportion
    assign(stream_name, stream) }
@





The top 10\% of events contributed \Sexpr{round(100*q_90$eagle,1)}\% of the sediment loading at Eagle Creek, \Sexpr{round(100*q_90$otter,1)}\% of the sediment loading at Otter Creek, \Sexpr{round(100*q_90$joosvalley,1)}\% of the sediment loading at Joos Valley Creek, and \Sexpr{round(100*q_90$brewery,1)}\% of the sediment loading at Brewery Creek.\\

Now we want to know how these major events are distributed within the event classes; that is, whether snowmelt tends to produce major loading events, or whether it is the post-snow events. Note that the \_tot column measures the total loading during an event. The snowmelt-driven events are different in kind than the rainfall-driven ones because they don't require continuous rain during the event. If the snowmelt-driven events are caused by warm weather, it seems reasonable that a single event might last for many days and cause more loading than a more-intense rainfall event that only lasts a day or two. To account for this, we will look both at total loading (\_tot) and average daily loading during an event (\_avg).\\

<<echo=False>>=
prp_major = proportions(streams, "major", col.names=c("snowmelt-driven", "early post-snow", "late post-snow"))
prp_all = proportions(streams, "event", col.names=c("snowmelt-driven", "early post-snow", "late post-snow"))
@

\begin{table}[h]
    \begin{center}
    \begin{tabular}{lr|lr|lr|l}
        & \multicolumn{2}{c}{Snowmelt    }\ & \multicolumn{2}{c}{Early post-snow}\ & \multicolumn{2}{c}{Late post-snow} \\
        Creek & All & Major & All & Major & All & Major \\
        \hline 
        Eagle & \Sexpr{round(100*prp_all['eagle',1], 0)}\% & \Sexpr{round(100*prp_major['eagle',1], 0)}\% & \Sexpr{round(100*prp_all['eagle',2], 0)}\% & \Sexpr{round(100*prp_major['eagle',2], 0)}\% & \Sexpr{round(100*prp_all['eagle',3], 0)}\% & \Sexpr{round(100*prp_major['eagle',3], 0)}\% \\
        Otter & \Sexpr{round(100*prp_all['otter',1], 0)}\% & \Sexpr{round(100*prp_major['otter',1], 0)}\% & \Sexpr{round(100*prp_all['otter',2], 0)}\% & \Sexpr{round(100*prp_major['otter',2], 0)}\% & \Sexpr{round(100*prp_all['otter',3], 0)}\% & \Sexpr{round(100*prp_major['otter',3], 0)}\% \\
        Joos & \Sexpr{round(100*prp_all['joosvalley',1], 0)}\% & \Sexpr{round(100*prp_major['joosvalley',1], 0)}\% & \Sexpr{round(100*prp_all['joosvalley',2], 0)}\% & \Sexpr{round(100*prp_major['joosvalley',2], 0)}\% & \Sexpr{round(100*prp_all['joosvalley',3], 0)}\% & \Sexpr{round(100*prp_major['joosvalley',3], 0)}\% \\
        
        Brewery & \Sexpr{round(100*prp_all['brewery',1], 0)}\% & \Sexpr{round(100*prp_major['brewery',1], 0)}\% & \Sexpr{round(100*prp_all['brewery',2], 0)}\% & \Sexpr{round(100*prp_major['brewery',2], 0)}\% & \Sexpr{round(100*prp_all['brewery',3], 0)}\% & \Sexpr{round(100*prp_major['brewery',3], 0)}\% \\
        
    \end{tabular}
    \end{center}
\end{table}



The table shows that the major loading events that produce the majority of the loading can be occur during each of the three annual periods. However, the events caused by snowmelt produced a smaller proportion of major events than their proportion of all events, and their relative contribution to the total sediment load was smaller than their proportion of loading events. Taken together, these insights tell us that, while snowmelt can cause a major loading event, a snowmelt-driven event is less likely to be a major contributor to sediment load than is a rainfall-driven event.\\



\begin{table}[h]
    \begin{center}
    \begin{tabular}{llccccc}
        &  &  & \multicolumn{2}{c}{Sediment} & \multicolumn{2}{c}{Phosphorus} \\
        Creek & Period & All events & Major events & Loading & Major events & Loading \\
        \hline 
        \multirow{3}{*}{Aggregated} & Snowmelt & 
        \Sexpr{round(100*sum(aggregate$event_class==1)/sum(aggregate$event), 0)}\% &
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==1,'stot_tot'], na.rm=T)/sum(aggregate$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="stot_tot", strata="stream")==1 & aggregate$event_class==1))/sum(major(aggregate, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==1,'ptot_tot'], na.rm=T)/sum(aggregate$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="ptot_tot", strata="stream")==1 & aggregate$event_class==1))/sum(major(aggregate, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Early post-snow & 
        \Sexpr{round(100*sum(aggregate$event_class==2)/sum(aggregate$event), 0)}\% &
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==2,'stot_tot'], na.rm=T)/sum(aggregate$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="stot_tot", strata="stream")==1 & aggregate$event_class==2))/sum(major(aggregate, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==2,'ptot_tot'], na.rm=T)/sum(aggregate$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="ptot_tot", strata="stream")==1 & aggregate$event_class==2))/sum(major(aggregate, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Late post-snow & 
        \Sexpr{round(100*sum(aggregate$event_class==3)/sum(aggregate$event), 0)}\% &
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==3,'stot_tot'], na.rm=T)/sum(aggregate$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="stot_tot", strata="stream")==1 & aggregate$event_class==3))/sum(major(aggregate, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(aggregate[aggregate$event_class==3,'ptot_tot'], na.rm=T)/sum(aggregate$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(aggregate, target="ptot_tot", strata="stream")==1 & aggregate$event_class==3))/sum(major(aggregate, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        
        \hline 
        \multirow{3}{*}{Eagle} & Snowmelt & 
        \Sexpr{round(100*sum(eagle$event_class==1)/sum(eagle$event), 0)}\% &
        \Sexpr{round(100*sum(eagle[eagle$event_class==1,'stot_tot'], na.rm=T)/sum(eagle$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="stot_tot", strata="stream")==1 & eagle$event_class==1))/sum(major(eagle, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(eagle[eagle$event_class==1,'ptot_tot'], na.rm=T)/sum(eagle$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="ptot_tot", strata="stream")==1 & eagle$event_class==1))/sum(major(eagle, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Early post-snow & 
        \Sexpr{round(100*sum(eagle$event_class==2)/sum(eagle$event), 0)}\% &
        \Sexpr{round(100*sum(eagle[eagle$event_class==2,'stot_tot'], na.rm=T)/sum(eagle$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="stot_tot", strata="stream")==1 & eagle$event_class==2))/sum(major(eagle, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(eagle[eagle$event_class==2,'ptot_tot'], na.rm=T)/sum(eagle$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="ptot_tot", strata="stream")==1 & eagle$event_class==2))/sum(major(eagle, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Late post-snow & 
        \Sexpr{round(100*sum(eagle$event_class==3)/sum(eagle$event), 0)}\% &
        \Sexpr{round(100*sum(eagle[eagle$event_class==3,'stot_tot'], na.rm=T)/sum(eagle$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="stot_tot", strata="stream")==1 & eagle$event_class==3))/sum(major(eagle, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(eagle[eagle$event_class==3,'ptot_tot'], na.rm=T)/sum(eagle$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(eagle, target="ptot_tot", strata="stream")==1 & eagle$event_class==3))/sum(major(eagle, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        
        \hline 
        \multirow{3}{*}{Joos} & Snowmelt & 
        \Sexpr{round(100*sum(joosvalley$event_class==1)/sum(joosvalley$event), 0)}\% &
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==1,'stot_tot'], na.rm=T)/sum(joosvalley$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="stot_tot", strata="stream")==1 & joosvalley$event_class==1))/sum(major(joosvalley, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==1,'ptot_tot'], na.rm=T)/sum(joosvalley$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="ptot_tot", strata="stream")==1 & joosvalley$event_class==1))/sum(major(joosvalley, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Early post-snow & 
        \Sexpr{round(100*sum(joosvalley$event_class==2)/sum(joosvalley$event), 0)}\% &
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==2,'stot_tot'], na.rm=T)/sum(joosvalley$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="stot_tot", strata="stream")==1 & joosvalley$event_class==2))/sum(major(joosvalley, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==2,'ptot_tot'], na.rm=T)/sum(joosvalley$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="ptot_tot", strata="stream")==1 & joosvalley$event_class==2))/sum(major(joosvalley, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Late post-snow & 
        \Sexpr{round(100*sum(joosvalley$event_class==3)/sum(joosvalley$event), 0)}\% &
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==3,'stot_tot'], na.rm=T)/sum(joosvalley$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="stot_tot", strata="stream")==1 & joosvalley$event_class==3))/sum(major(joosvalley, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(joosvalley[joosvalley$event_class==3,'ptot_tot'], na.rm=T)/sum(joosvalley$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(joosvalley, target="ptot_tot", strata="stream")==1 & joosvalley$event_class==3))/sum(major(joosvalley, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        
        \hline 
        \multirow{3}{*}{Otter} & Snowmelt & 
        \Sexpr{round(100*sum(otter$event_class==1)/sum(otter$event), 0)}\% &
        \Sexpr{round(100*sum(otter[otter$event_class==1,'stot_tot'], na.rm=T)/sum(otter$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="stot_tot", strata="stream")==1 & otter$event_class==1))/sum(major(otter, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(otter[otter$event_class==1,'ptot_tot'], na.rm=T)/sum(otter$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="ptot_tot", strata="stream")==1 & otter$event_class==1))/sum(major(otter, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Early post-snow & 
        \Sexpr{round(100*sum(otter$event_class==2)/sum(otter$event), 0)}\% &
        \Sexpr{round(100*sum(otter[otter$event_class==2,'stot_tot'], na.rm=T)/sum(otter$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="stot_tot", strata="stream")==1 & otter$event_class==2))/sum(major(otter, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(otter[otter$event_class==2,'ptot_tot'], na.rm=T)/sum(otter$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="ptot_tot", strata="stream")==1 & otter$event_class==2))/sum(major(otter, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Late post-snow & 
        \Sexpr{round(100*sum(otter$event_class==3)/sum(otter$event), 0)}\% &
        \Sexpr{round(100*sum(otter[otter$event_class==3,'stot_tot'], na.rm=T)/sum(otter$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="stot_tot", strata="stream")==1 & otter$event_class==3))/sum(major(otter, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(otter[otter$event_class==3,'ptot_tot'], na.rm=T)/sum(otter$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(otter, target="ptot_tot", strata="stream")==1 & otter$event_class==3))/sum(major(otter, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        
        \hline 
        \multirow{3}{*}{Brewery} & Snowmelt & 
        \Sexpr{round(100*sum(brewery$event_class==1)/sum(brewery$event), 0)}\% &
        \Sexpr{round(100*sum(brewery[brewery$event_class==1,'stot_tot'], na.rm=T)/sum(brewery$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="stot_tot", strata="stream")==1 & brewery$event_class==1))/sum(major(brewery, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(brewery[brewery$event_class==1,'ptot_tot'], na.rm=T)/sum(brewery$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="ptot_tot", strata="stream")==1 & brewery$event_class==1))/sum(major(brewery, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Early post-snow & 
        \Sexpr{round(100*sum(brewery$event_class==2)/sum(brewery$event), 0)}\% &
        \Sexpr{round(100*sum(brewery[brewery$event_class==2,'stot_tot'], na.rm=T)/sum(brewery$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="stot_tot", strata="stream")==1 & brewery$event_class==2))/sum(major(brewery, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(brewery[brewery$event_class==2,'ptot_tot'], na.rm=T)/sum(brewery$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="ptot_tot", strata="stream")==1 & brewery$event_class==2))/sum(major(brewery, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
        & Late post-snow & 
        \Sexpr{round(100*sum(brewery$event_class==3)/sum(brewery$event), 0)}\% &
        \Sexpr{round(100*sum(brewery[brewery$event_class==3,'stot_tot'], na.rm=T)/sum(brewery$stot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="stot_tot", strata="stream")==1 & brewery$event_class==3))/sum(major(brewery, target="stot_tot", strata="stream"), na.rm=T), 0)}\% & 
        \Sexpr{round(100*sum(brewery[brewery$event_class==3,'ptot_tot'], na.rm=T)/sum(brewery$ptot_tot, na.rm=T), 0)}\% & 
        \Sexpr{round(100*length(which(major(brewery, target="ptot_tot", strata="stream")==1 & brewery$event_class==3))/sum(major(brewery, target="ptot_tot", strata="stream"), na.rm=T), 0)}\% \\
    \end{tabular}
    \end{center}
\end{table}



<<echo=False, results=tex, include=True>>=
stream = "eagle"
stream = get(stream)

snow = stream[stream$event_class==1,]
guide(stot_tot~nws_prec+total_water+nws_snow+ap_1day+ap_2day+ap_3day+melt_snow+tmean+tmax+tmin+sweq+julian+sin_julian+cos_julian, data=snow, sweave=T, cv_gain=0)

early = stream[stream$event_class==2,]
guide(stot_tot~nws_prec+event_type+ap_1day+ap_2day+ap_3day+total_water+theisen+sweq+julian+sin_julian+cos_julian+tmean+tmax+tmin, data=early, sweave=T, cv_gain=0)

late = stream[stream$event_class==3,]
guide(stot_tot~nws_prec+event_type+total_water+ap_1day+ap_2day+ap_3day+julian+theisen+sin_julian+cos_julian+tmean+tmax+tmin, data=late, sweave=T, cv_gain=0)
@

\bibliographystyle{plain}
\bibliography{../../references/bibliography}

\end{document}
